@page "/Prioridad/Edit/{PrioridadId:int}"
@inject PrioridadService PrioridadService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<EditForm Model="Prioridad" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
        <div class="card-header bg-primary text-white" style="text-align: center;">
            <h3> <i class="fas fa-clipboard-list"></i> Editar Prioridades</h3>
        </div>

        <div class="card-body">

            <div class="row">

                <div class="col-md-6 mb-3">
                    <label for="PrioridadId" class="form-label">PrioridadId:</label>
                    <div class="input-group">
                        <div style="width: 40%; height: 1em;">
                            <InputNumber @bind-Value="Prioridad.PrioridadId" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" readonly/>
                        </div>
                    </div>
                </div>
            </div>

            <div class="mb-3">
                <label for="Descripcion" class="form-label">Descripción:</label>
                <InputText @bind-Value="Prioridad.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => Prioridad.Descripcion)" />
            </div>

            <div class="mb-3">
                <label for="DiasCompromiso" class="form-label">Días Compromiso:</label>
                <InputNumber @bind-Value="Prioridad.DiasCompromiso" class="form-control" />
                <ValidationMessage For="@(() => Prioridad.DiasCompromiso)" />
            </div>

        </div>

        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">
                <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo </button>
                <button type="submit" class="btn btn-outline-success ml-2"><span class="bi bi-check-circle-fill"></span> Guardar </button>
                <a type="button" href="/Prioridad/Index/" class="btn btn-outline-danger"><span class="bi bi-arrow-bar-left"></span> Retroceder </a>
            </div>
        </div>
    </div>
</EditForm>


@code {
    [Parameter]
    public int? PrioridadId { get; set; }
    public Prioridades Prioridad { get; set; } = new Prioridades();
    private bool Existe = false;

    protected override async Task OnInitializedAsync()
    {
        if (PrioridadId.HasValue)
        {
            // si recibimos un {PrioridadId:int} por parametro asignarlo
            // y luego buscarla para que se vea en pantalla
            Prioridad.PrioridadId = PrioridadId.Value;
            await Buscar();
        }
    }

    public void Nuevo()
    {
        Prioridad = new Prioridades();
        Existe = false;
    }

    public async Task Buscar()
    {
        var prioridadEncontrada = await PrioridadService.Buscar(Prioridad.PrioridadId);

        if (prioridadEncontrada != null)
        {
            Prioridad = prioridadEncontrada;
        }
        // else
        // {
        //     notificationService.ShowNotification(
        //     titulo: "Error de Busqueda",
        //     mensaje: "Registro no encontrado",
        //     NotificationSeverity.Error);
        // }
    }

    public async Task<bool> Validar()
    {
        //TODO: Cambiar por Any y llevarlo al servicio.
        Existe = await PrioridadService.Existe(Prioridad.PrioridadId, Prioridad.Descripcion);
        return !Existe;
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
            return;
        }

        var guardo = await PrioridadService.Guardar(Prioridad);
        if (guardo)
        {
            Nuevo();
        }
    }

    public async Task Eliminar()
    {
        var eliminado = await PrioridadService.Eliminar(Prioridad.PrioridadId);
        Nuevo();
    }
}
